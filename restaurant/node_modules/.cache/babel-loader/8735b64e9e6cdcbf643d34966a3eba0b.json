{"ast":null,"code":"//GOOGLE CLASS ICONS FOR FORM STYLING\nexport const NICK_ICON = 'fas fa-id-card icon-color';\nexport const NAME_ICON = 'fas fa-user icon-color';\nexport const PASS_ICON = 'fas fa-key icon-color';\nexport const MAIL_ICON = 'fas fa-envelope-open icon-color'; //ATTRIBUTE OBJS FOR EASIER MAPPING\n\nconst NICK_ATTR = {\n  type: \"Nick\",\n  icon: NICK_ICON,\n  value: \"nick\",\n  setField: \"setNick\"\n};\nconst FIRSTNAME_ATTR = {\n  type: \"First name\",\n  icon: NAME_ICON,\n  value: \"firstName\",\n  setField: \"setFirstName\"\n};\nconst LASTNAME_ATTR = {\n  type: \"Last name\",\n  icon: \"\",\n  value: \"lastName\",\n  setField: \"setLastName\"\n};\nconst PASS_ATTR = {\n  type: \"Password\",\n  icon: PASS_ICON,\n  value: \"pass\",\n  setField: \"setPass\"\n};\nconst REPASS_ATTR = {\n  type: \"Confirm Password\",\n  icon: \"\",\n  value: \"rePass\",\n  setField: \"setRePass\"\n};\nconst EMAIL_ATTRS = {\n  type: \"Email\",\n  icon: MAIL_ICON,\n  value: \"email\",\n  setField: \"setEmail\"\n};\nexport const FIELDS = [NICK_ATTR, FIRSTNAME_ATTR, LASTNAME_ATTR, PASS_ATTR, REPASS_ATTR, EMAIL_ATTRS]; //USEFUL FUNCTIONS FOR REGEX_HOLDER\n\nfunction nameRegexMsg() {\n  return [{\n    \"^[a-zA-Z]*$\": '-Name may contain only letters(a-zA-z)!'\n  }, {\n    \"^.{2,}$\": '-Name should contain at least 2 characters!'\n  }];\n}\n\nfunction passRegexMsg() {\n  return [{\n    \"^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#\\$%\\^&\\*])\": '-Password must contain at least one uppercase letter (A-Z) , one sybmol (!@#$%^&*) and one digit (0-9)'\n  }, {\n    \"^.{10,}$\": '-Password should contain at least 10 characters!'\n  }];\n} //MAP CONTAINING ATTRIBUTES AND A LIST OR REGEX+MSG THAT WILL BE DISPLAYED BASED ON USER ERROR INPUT\n\n\nexport const REGEX_HOLDER = {\n  nick: [{\n    \"^[a-zA-Z0-9-_]*$\": '-Nickname may contain only letters(a-zA-z) and digits(0-9)!'\n  }, {\n    \"^.{5,}$\": '-Nickname should contain at least 5 characters!'\n  }],\n  firstName: nameRegexMsg(),\n  lastName: nameRegexMsg(),\n  pass: passRegexMsg(),\n  rePass: passRegexMsg(),\n  email: [{\n    \"^[A-Za-z0-9_!#$%&'*+/=?`{|}~^.-]+@[A-Za-z.-]+$\": '-Invalid email!'\n  }]\n}; //ROUTING ADDRESSES\n\nconst ROUTES_WITHOUT_HOMEPAGE = {\n  '/login': false,\n  '/register': false\n};","map":{"version":3,"sources":["C:/React_Projects/restaurant/restaurant/src/Utils/Register/Constants.js"],"names":["NICK_ICON","NAME_ICON","PASS_ICON","MAIL_ICON","NICK_ATTR","type","icon","value","setField","FIRSTNAME_ATTR","LASTNAME_ATTR","PASS_ATTR","REPASS_ATTR","EMAIL_ATTRS","FIELDS","nameRegexMsg","passRegexMsg","REGEX_HOLDER","nick","firstName","lastName","pass","rePass","email","ROUTES_WITHOUT_HOMEPAGE"],"mappings":"AAAA;AAEA,OAAO,MAAMA,SAAS,GAAG,2BAAlB;AACP,OAAO,MAAMC,SAAS,GAAG,wBAAlB;AACP,OAAO,MAAMC,SAAS,GAAG,uBAAlB;AACP,OAAO,MAAMC,SAAS,GAAG,iCAAlB,C,CAEP;;AAEA,MAAMC,SAAS,GAAG;AAACC,EAAAA,IAAI,EAAG,MAAR;AAAiBC,EAAAA,IAAI,EAAGN,SAAxB;AAAoCO,EAAAA,KAAK,EAAG,MAA5C;AAAqDC,EAAAA,QAAQ,EAAG;AAAhE,CAAlB;AACA,MAAMC,cAAc,GAAG;AAACJ,EAAAA,IAAI,EAAG,YAAR;AAAuBC,EAAAA,IAAI,EAAGL,SAA9B;AAA0CM,EAAAA,KAAK,EAAG,WAAlD;AAAgEC,EAAAA,QAAQ,EAAG;AAA3E,CAAvB;AACA,MAAME,aAAa,GAAG;AAACL,EAAAA,IAAI,EAAG,WAAR;AAAsBC,EAAAA,IAAI,EAAG,EAA7B;AAAkCC,EAAAA,KAAK,EAAG,UAA1C;AAAuDC,EAAAA,QAAQ,EAAG;AAAlE,CAAtB;AACA,MAAMG,SAAS,GAAG;AAACN,EAAAA,IAAI,EAAG,UAAR;AAAqBC,EAAAA,IAAI,EAAGJ,SAA5B;AAAwCK,EAAAA,KAAK,EAAG,MAAhD;AAAyDC,EAAAA,QAAQ,EAAG;AAApE,CAAlB;AACA,MAAMI,WAAW,GAAG;AAACP,EAAAA,IAAI,EAAG,kBAAR;AAA6BC,EAAAA,IAAI,EAAG,EAApC;AAAyCC,EAAAA,KAAK,EAAG,QAAjD;AAA4DC,EAAAA,QAAQ,EAAG;AAAvE,CAApB;AACA,MAAMK,WAAW,GAAG;AAACR,EAAAA,IAAI,EAAG,OAAR;AAAkBC,EAAAA,IAAI,EAAGH,SAAzB;AAAqCI,EAAAA,KAAK,EAAG,OAA7C;AAAuDC,EAAAA,QAAQ,EAAG;AAAlE,CAApB;AAEA,OAAO,MAAMM,MAAM,GAAG,CAACV,SAAD,EAAaK,cAAb,EAA8BC,aAA9B,EAA8CC,SAA9C,EAA0DC,WAA1D,EAAwEC,WAAxE,CAAf,C,CAEP;;AACA,SAASE,YAAT,GAAuB;AACnB,SAAQ,CACJ;AAAC,mBAAgB;AAAjB,GADI,EAEJ;AAAC,eAAY;AAAb,GAFI,CAAR;AAIH;;AAED,SAASC,YAAT,GAAuB;AACnB,SACI,CACI;AAAC,6DAA0D;AAA3D,GADJ,EAEI;AAAC,gBAAa;AAAd,GAFJ,CADJ;AAMH,C,CAED;;;AACA,OAAO,MAAMC,YAAY,GAAG;AACxBC,EAAAA,IAAI,EAAG,CAAC;AAAC,wBAAqB;AAAtB,GAAD,EACC;AAAC,eAAY;AAAb,GADD,CADiB;AAIxBC,EAAAA,SAAS,EAAGJ,YAAY,EAJA;AAKxBK,EAAAA,QAAQ,EAAGL,YAAY,EALC;AAMxBM,EAAAA,IAAI,EAAGL,YAAY,EANK;AAOxBM,EAAAA,MAAM,EAAGN,YAAY,EAPG;AAQxBO,EAAAA,KAAK,EAAG,CACJ;AAAC,sDAAmD;AAApD,GADI;AARgB,CAArB,C,CAaP;;AAEA,MAAMC,uBAAuB,GAAG;AAC5B,YAAW,KADiB;AAE5B,eAAc;AAFc,CAAhC","sourcesContent":["//GOOGLE CLASS ICONS FOR FORM STYLING\r\n\r\nexport const NICK_ICON = 'fas fa-id-card icon-color';\r\nexport const NAME_ICON = 'fas fa-user icon-color';\r\nexport const PASS_ICON = 'fas fa-key icon-color';\r\nexport const MAIL_ICON = 'fas fa-envelope-open icon-color';\r\n\r\n//ATTRIBUTE OBJS FOR EASIER MAPPING\r\n\r\nconst NICK_ATTR = {type : \"Nick\" , icon : NICK_ICON , value : \"nick\" , setField : \"setNick\"};\r\nconst FIRSTNAME_ATTR = {type : \"First name\" , icon : NAME_ICON , value : \"firstName\" , setField : \"setFirstName\"};\r\nconst LASTNAME_ATTR = {type : \"Last name\" , icon : \"\" , value : \"lastName\" , setField : \"setLastName\"};\r\nconst PASS_ATTR = {type : \"Password\" , icon : PASS_ICON , value : \"pass\" , setField : \"setPass\"};\r\nconst REPASS_ATTR = {type : \"Confirm Password\" , icon : \"\" , value : \"rePass\" , setField : \"setRePass\"};\r\nconst EMAIL_ATTRS = {type : \"Email\" , icon : MAIL_ICON , value : \"email\" , setField : \"setEmail\"};\r\n\r\nexport const FIELDS = [NICK_ATTR , FIRSTNAME_ATTR , LASTNAME_ATTR , PASS_ATTR , REPASS_ATTR , EMAIL_ATTRS];\r\n\r\n//USEFUL FUNCTIONS FOR REGEX_HOLDER\r\nfunction nameRegexMsg(){\r\n    return ([\r\n        {\"^[a-zA-Z]*$\" : '-Name may contain only letters(a-zA-z)!'},\r\n        {\"^.{2,}$\" : '-Name should contain at least 2 characters!'}\r\n    ]);\r\n}\r\n\r\nfunction passRegexMsg(){\r\n    return(\r\n        [\r\n            {\"^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#\\$%\\^&\\*])\" : '-Password must contain at least one uppercase letter (A-Z) , one sybmol (!@#$%^&*) and one digit (0-9)'},\r\n            {\"^.{10,}$\" : '-Password should contain at least 10 characters!'}\r\n        ]\r\n    )\r\n}\r\n\r\n//MAP CONTAINING ATTRIBUTES AND A LIST OR REGEX+MSG THAT WILL BE DISPLAYED BASED ON USER ERROR INPUT\r\nexport const REGEX_HOLDER = {\r\n    nick : [{\"^[a-zA-Z0-9-_]*$\" : '-Nickname may contain only letters(a-zA-z) and digits(0-9)!'},\r\n            {\"^.{5,}$\" : '-Nickname should contain at least 5 characters!'}\r\n            ],\r\n    firstName : nameRegexMsg(),\r\n    lastName : nameRegexMsg(),\r\n    pass : passRegexMsg(),\r\n    rePass : passRegexMsg(),\r\n    email : [\r\n        {\"^[A-Za-z0-9_!#$%&'*+/=?`{|}~^.-]+@[A-Za-z.-]+$\" : '-Invalid email!'}\r\n    ]\r\n}\r\n\r\n//ROUTING ADDRESSES\r\n\r\nconst ROUTES_WITHOUT_HOMEPAGE = {\r\n    '/login' : false,\r\n    '/register' : false\r\n}\r\n"]},"metadata":{},"sourceType":"module"}