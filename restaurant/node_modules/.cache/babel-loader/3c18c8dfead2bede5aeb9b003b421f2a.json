{"ast":null,"code":"import { REGEX_HOLDER } from \"./Constants\";\nimport { addUser } from \"./RegisterNewUser\";\nimport { allEntries } from \"./RegisterNewUser\";\n\nfunction validateFields(currUser, currErr) {\n  for (const [field, regexList] of Object.entries(REGEX_HOLDER)) {\n    var errorList = '';\n    regexList.forEach(regex => {\n      for (var key in regex) {\n        let curr_key = key;\n        let curr_value = regex[key];\n        let re = new RegExp(curr_key);\n\n        if (!re.test(currUser[field])) {\n          errorList = errorList + curr_value + '\\n';\n        }\n      }\n    });\n\n    if ((field == 'pass' || field == 'rePass') && currUser.pass !== currUser.rePass) {\n      errorList += '-Passwords should match!\\n';\n    }\n\n    currErr[field] = errorList;\n  }\n}\n\nexport function registerPerson(nick, firstName, lastName, pass, rePass, email, users, setInvalidRegister, setUsers) {\n  const currUser = {\n    nick: nick,\n    firstName: firstName,\n    lastName: lastName,\n    pass: pass,\n    rePass: rePass,\n    email: email\n  };\n  var currErr = {\n    nick: '',\n    firstName: '',\n    lastName: '',\n    pass: '',\n    rePass: '',\n    email: ''\n  };\n  validateFields(currUser, currErr);\n  const keys = Object.keys(currErr);\n  let valid_user = true;\n  keys.forEach((key, index) => {\n    if (currErr[key].length != 0) {\n      valid_user = false;\n      setInvalidRegister(currErr);\n    }\n  }); // let currUsers;\n  // allEntries(currUsers)\n  // currUsers.forEach((user) => {\n  //     if(user.email === currUser.email){\n  //         valid_user = false;\n  //     }\n  // })\n\n  if (valid_user) {\n    alert(\"User registered succesfully!\");\n    Axios.post(\"http://localhost:4000/add\", {\n      user: currUser\n    }).then(() => {\n      console.log(\"User added!\");\n    });\n  }\n}\nexport default validateFields;","map":{"version":3,"sources":["C:/React_Projects/restaurant/restaurant/src/Utils/Register/RegisterValidation.js"],"names":["REGEX_HOLDER","addUser","allEntries","validateFields","currUser","currErr","field","regexList","Object","entries","errorList","forEach","regex","key","curr_key","curr_value","re","RegExp","test","pass","rePass","registerPerson","nick","firstName","lastName","email","users","setInvalidRegister","setUsers","keys","valid_user","index","length","alert","Axios","post","user","then","console","log"],"mappings":"AAAA,SAASA,YAAT,QAA6B,aAA7B;AACA,SAAQC,OAAR,QAAsB,mBAAtB;AACA,SAASC,UAAT,QAA2B,mBAA3B;;AAEA,SAASC,cAAT,CAAwBC,QAAxB,EAAmCC,OAAnC,EAA2C;AACvC,OAAI,MAAM,CAACC,KAAD,EAASC,SAAT,CAAV,IAAiCC,MAAM,CAACC,OAAP,CAAeT,YAAf,CAAjC,EAA8D;AAC1D,QAAIU,SAAS,GAAG,EAAhB;AACAH,IAAAA,SAAS,CAACI,OAAV,CAAkBC,KAAK,IAAI;AACvB,WAAI,IAAIC,GAAR,IAAeD,KAAf,EAAqB;AACjB,YAAIE,QAAQ,GAAGD,GAAf;AACA,YAAIE,UAAU,GAAGH,KAAK,CAACC,GAAD,CAAtB;AACA,YAAIG,EAAE,GAAG,IAAIC,MAAJ,CAAWH,QAAX,CAAT;;AACA,YAAG,CAACE,EAAE,CAACE,IAAH,CAAQd,QAAQ,CAACE,KAAD,CAAhB,CAAJ,EAA6B;AACzBI,UAAAA,SAAS,GAAGA,SAAS,GAAGK,UAAZ,GAAyB,IAArC;AACH;AACJ;AACJ,KATD;;AAUA,QAAG,CAACT,KAAK,IAAI,MAAT,IAAmBA,KAAK,IAAI,QAA7B,KAA2CF,QAAQ,CAACe,IAAT,KAAkBf,QAAQ,CAACgB,MAAzE,EAAiF;AAC7EV,MAAAA,SAAS,IAAI,4BAAb;AACH;;AACDL,IAAAA,OAAO,CAACC,KAAD,CAAP,GAAiBI,SAAjB;AACH;AACJ;;AAED,OAAO,SAASW,cAAT,CAAwBC,IAAxB,EAA+BC,SAA/B,EAA2CC,QAA3C,EAAsDL,IAAtD,EAA6DC,MAA7D,EAAsEK,KAAtE,EAA8EC,KAA9E,EAAsFC,kBAAtF,EAA2GC,QAA3G,EAAoH;AACvH,QAAMxB,QAAQ,GAAG;AAACkB,IAAAA,IAAI,EAAGA,IAAR;AAAeC,IAAAA,SAAS,EAAGA,SAA3B;AAAuCC,IAAAA,QAAQ,EAAGA,QAAlD;AAA6DL,IAAAA,IAAI,EAAGA,IAApE;AAA2EC,IAAAA,MAAM,EAAGA,MAApF;AAA6FK,IAAAA,KAAK,EAAGA;AAArG,GAAjB;AACA,MAAIpB,OAAO,GAAG;AAACiB,IAAAA,IAAI,EAAG,EAAR;AAAaC,IAAAA,SAAS,EAAG,EAAzB;AAA8BC,IAAAA,QAAQ,EAAG,EAAzC;AAA8CL,IAAAA,IAAI,EAAG,EAArD;AAA0DC,IAAAA,MAAM,EAAG,EAAnE;AAAwEK,IAAAA,KAAK,EAAG;AAAhF,GAAd;AACAtB,EAAAA,cAAc,CAACC,QAAD,EAAYC,OAAZ,CAAd;AACA,QAAMwB,IAAI,GAAGrB,MAAM,CAACqB,IAAP,CAAYxB,OAAZ,CAAb;AAEA,MAAIyB,UAAU,GAAG,IAAjB;AACAD,EAAAA,IAAI,CAAClB,OAAL,CAAa,CAACE,GAAD,EAAOkB,KAAP,KAAgB;AACzB,QAAG1B,OAAO,CAACQ,GAAD,CAAP,CAAamB,MAAb,IAAuB,CAA1B,EAA4B;AACxBF,MAAAA,UAAU,GAAG,KAAb;AACAH,MAAAA,kBAAkB,CAACtB,OAAD,CAAlB;AACH;AACJ,GALD,EAPuH,CAcvH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAGyB,UAAH,EAAc;AACVG,IAAAA,KAAK,CAAC,8BAAD,CAAL;AAEAC,IAAAA,KAAK,CAACC,IAAN,CAAW,2BAAX,EAAyC;AACrCC,MAAAA,IAAI,EAAGhC;AAD8B,KAAzC,EAEGiC,IAFH,CAEQ,MAAM;AACVC,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACH,KAJD;AAKH;AAEJ;AAED,eAAepC,cAAf","sourcesContent":["import { REGEX_HOLDER } from \"./Constants\";\r\nimport {addUser} from \"./RegisterNewUser\"\r\nimport { allEntries } from \"./RegisterNewUser\";\r\n\r\nfunction validateFields(currUser , currErr){\r\n    for(const [field , regexList] of Object.entries(REGEX_HOLDER)){\r\n        var errorList = '';\r\n        regexList.forEach(regex => {\r\n            for(var key in regex){\r\n                let curr_key = key;\r\n                let curr_value = regex[key];\r\n                let re = new RegExp(curr_key)\r\n                if(!re.test(currUser[field])){\r\n                    errorList = errorList + curr_value + '\\n';\r\n                }\r\n            }\r\n        })\r\n        if((field == 'pass' || field == 'rePass') && (currUser.pass !== currUser.rePass)){\r\n            errorList += '-Passwords should match!\\n';\r\n        }\r\n        currErr[field] = errorList;\r\n    }\r\n}\r\n\r\nexport function registerPerson(nick , firstName , lastName , pass , rePass , email , users , setInvalidRegister , setUsers){\r\n    const currUser = {nick : nick , firstName : firstName , lastName : lastName , pass : pass , rePass : rePass , email : email};\r\n    var currErr = {nick : '' , firstName : '' , lastName : '' , pass : '' , rePass : '' , email : ''};\r\n    validateFields(currUser , currErr);\r\n    const keys = Object.keys(currErr);\r\n\r\n    let valid_user = true;\r\n    keys.forEach((key , index) =>{\r\n        if(currErr[key].length != 0){\r\n            valid_user = false;\r\n            setInvalidRegister(currErr);\r\n        }\r\n    })\r\n\r\n    // let currUsers;\r\n    // allEntries(currUsers)\r\n    // currUsers.forEach((user) => {\r\n    //     if(user.email === currUser.email){\r\n    //         valid_user = false;\r\n    //     }\r\n    // })\r\n\r\n    if(valid_user){\r\n        alert(\"User registered succesfully!\");\r\n        \r\n        Axios.post(\"http://localhost:4000/add\" , {\r\n            user : currUser\r\n        }).then(() => {\r\n            console.log(\"User added!\")\r\n        })\r\n    }\r\n\r\n}\r\n\r\nexport default validateFields;"]},"metadata":{},"sourceType":"module"}