{"ast":null,"code":"import menuItems from \"Menu/Constants\";\n\nfunction dataCartFormat(userData) {\n  var convertedData = [];\n  userData.forEach(userItem => {\n    for (let key in menuItems) {\n      if (menuItems[key].id === userItem.idItem) {\n        convertedData.push({\n          id: menuItems[key].id,\n          name: key,\n          price: menuItems[key].price,\n          quantity: userItem.quantity\n        });\n        break;\n      }\n    }\n  });\n  return convertedData;\n}\n\nexport function getPosition() {\n  var userAddress = \"Cluj-Napoca ,\" + \" strada \" + street + \" nr.\" + streetNumber;\n\n  if (apartament.length > 0) {\n    userAddress += \", \" + \"ap.\" + apartament;\n  }\n\n  Geocode.fromAddress(userAddress).then(response => {\n    const {\n      lat,\n      lng\n    } = response.results[0].geometry.location;\n    invalidAddress.invalidStreet = false;\n    invalidAddress.invalidNumber = false;\n    invalidAddress.invalidAp = false;\n    invalidAddress.invalidPhone = false;\n    setPosition({\n      lat: lat,\n      lng: lng\n    });\n  }, error => {\n    console.error(error);\n  });\n}\nexport function validateInput(streetInput, numberInput, apInput, phoneInput, setInvalidAddress, setPosition) {\n  var invalidAddress = {\n    invalidStreet: false,\n    invalidNumber: false,\n    invalidAp: false,\n    invalidPhone: false\n  };\n  let phoneRegex = new RegExp(\"^[\\+]?[(]?[0-9]{3}[)]?[-\\s\\.]?[0-9]{3}[-\\s\\.]?[0-9]{4,6}$\");\n  let numberRegex = new RegExp(\"^[1-9][0-9]?$|^1000$\");\n  let apRegex = new RegExp(\"^[1-9][0-9]?$|^1000$\");\n\n  if (streetInput.length <= 0) {\n    invalidAddress.invalidStreet = true;\n  }\n\n  if (!numberRegex.test(numberInput)) {\n    invalidAddress.invalidNumber = true;\n  }\n\n  if (!apRegex.test(apInput) && apInput.length > 0) {\n    invalidAddress.invalidAp = true;\n  }\n\n  if (!phoneRegex.test(phoneInput)) {\n    invalidAddress.invalidPhone = true;\n  }\n\n  if (invalidAddress.invalidStreet || invalidAddress.invalidNumber || invalidAddress.invalidAp || invalidAddress.invalidPhone) {\n    setInvalidAddress(invalidAddress);\n  } else {\n    getPosition();\n  }\n}\nexport default dataCartFormat;","map":{"version":3,"sources":["C:/React_Projects/restaurant/restaurant/src/Cart/logic.js"],"names":["menuItems","dataCartFormat","userData","convertedData","forEach","userItem","key","id","idItem","push","name","price","quantity","getPosition","userAddress","street","streetNumber","apartament","length","Geocode","fromAddress","then","response","lat","lng","results","geometry","location","invalidAddress","invalidStreet","invalidNumber","invalidAp","invalidPhone","setPosition","error","console","validateInput","streetInput","numberInput","apInput","phoneInput","setInvalidAddress","phoneRegex","RegExp","numberRegex","apRegex","test"],"mappings":"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","sourcesContent":["import menuItems from \"Menu/Constants\";\r\n\r\nfunction dataCartFormat(userData){\r\n    var convertedData = [];\r\n    userData.forEach((userItem) => {\r\n        for(let key in menuItems){\r\n            if(menuItems[key].id === userItem.idItem){\r\n                convertedData.push({\r\n                    id : menuItems[key].id,\r\n                    name : key ,\r\n                    price : menuItems[key].price,\r\n                    quantity : userItem.quantity\r\n                })\r\n                break;\r\n            }\r\n        }\r\n    })\r\n    return convertedData;\r\n}\r\n\r\nexport function getPosition(){\r\n    var userAddress = \"Cluj-Napoca ,\" + \" strada \" + street + \" nr.\" + streetNumber;\r\n    if(apartament.length > 0){userAddress += \", \" + \"ap.\" + apartament} \r\n    Geocode.fromAddress(userAddress).then(\r\n        (response) => {\r\n          const { lat, lng } = response.results[0].geometry.location;\r\n          invalidAddress.invalidStreet = false;\r\n          invalidAddress.invalidNumber = false;\r\n          invalidAddress.invalidAp = false;\r\n          invalidAddress.invalidPhone = false;\r\n          setPosition({lat : lat , lng : lng});\r\n        },\r\n        (error) => {\r\n          console.error(error);\r\n        }\r\n      );\r\n}\r\n\r\nexport function validateInput(streetInput , numberInput , apInput ,  phoneInput , setInvalidAddress , setPosition){\r\n    var invalidAddress = {invalidStreet : false , invalidNumber : false , invalidAp : false , invalidPhone : false};\r\n    let phoneRegex = new RegExp(\"^[\\+]?[(]?[0-9]{3}[)]?[-\\s\\.]?[0-9]{3}[-\\s\\.]?[0-9]{4,6}$\");\r\n    let numberRegex = new RegExp(\"^[1-9][0-9]?$|^1000$\");\r\n    let apRegex = new RegExp(\"^[1-9][0-9]?$|^1000$\");\r\n    if(streetInput.length <= 0){\r\n        invalidAddress.invalidStreet = true;\r\n    }\r\n    if(!numberRegex.test(numberInput)){\r\n        invalidAddress.invalidNumber = true;\r\n    }   \r\n    if(!apRegex.test(apInput) && apInput.length > 0){\r\n        invalidAddress.invalidAp = true;\r\n    }\r\n    if(!phoneRegex.test(phoneInput)){\r\n        invalidAddress.invalidPhone = true;\r\n    }\r\n    if((invalidAddress.invalidStreet) || (invalidAddress.invalidNumber) || (invalidAddress.invalidAp) || (invalidAddress.invalidPhone)){\r\n        setInvalidAddress(invalidAddress);\r\n    }else{\r\n        getPosition();\r\n    } \r\n}\r\n\r\nexport default dataCartFormat;"]},"metadata":{},"sourceType":"module"}