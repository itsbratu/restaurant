{"ast":null,"code":"import menuItems from \"Menu/Constants\";\nimport markers from \"Utils/Maps/markers\";\n\nfunction dataCartFormat(userData) {\n  var convertedData = [];\n  userData.forEach(userItem => {\n    for (let key in menuItems) {\n      if (menuItems[key].id === userItem.idItem) {\n        convertedData.push({\n          id: menuItems[key].id,\n          name: key,\n          price: menuItems[key].price,\n          quantity: userItem.quantity\n        });\n        break;\n      }\n    }\n  });\n  return convertedData;\n}\n\nexport function getDistanceFromLatLonInKm(lat1, lon1, lat2, lon2) {\n  var R = 6371; // Radius of the earth in km\n\n  var dLat = deg2rad(lat2 - lat1); // deg2rad below\n\n  var dLon = deg2rad(lon2 - lon1);\n  var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n  var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  var d = R * c; // Distance in km\n\n  return d;\n}\n\nfunction deg2rad(deg) {\n  return deg * (Math.PI / 180);\n}\n\nfunction coordsLine(homeLat, homeLng) {\n  var minimumDistance = getDistanceFromLatLonInKm(homeLat, homeLng, markers[0].position.lat, markers[0].position.lng);\n  var destinationCoords = {\n    lat: markers[0].position.lat,\n    lng: markers[0].position.lng\n  };\n  markers.map(currentMarker => {\n    const currentDistance = getDistanceFromLatLonInKm(homeLat, homeLng, currentMarker.position.lat, currentMarker.position.lng);\n\n    if (currentDistance < minimumDistance) {\n      minimumDistance = currentDistance;\n      destinationCoords.lat = currentMarker.position.lat;\n      destinationCoords.lng = currentMarker.position.lng;\n    }\n  });\n}\n\nexport default dataCartFormat;","map":{"version":3,"sources":["C:/React_Projects/restaurant/restaurant/src/Cart/logic.js"],"names":["menuItems","markers","dataCartFormat","userData","convertedData","forEach","userItem","key","id","idItem","push","name","price","quantity","getDistanceFromLatLonInKm","lat1","lon1","lat2","lon2","R","dLat","deg2rad","dLon","a","Math","sin","cos","c","atan2","sqrt","d","deg","PI","coordsLine","homeLat","homeLng","minimumDistance","position","lat","lng","destinationCoords","map","currentMarker","currentDistance"],"mappings":"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","sourcesContent":["import menuItems from \"Menu/Constants\";\r\nimport markers from \"Utils/Maps/markers\";\r\n\r\nfunction dataCartFormat(userData){\r\n    var convertedData = [];\r\n    userData.forEach((userItem) => {\r\n        for(let key in menuItems){\r\n            if(menuItems[key].id === userItem.idItem){\r\n                convertedData.push({\r\n                    id : menuItems[key].id,\r\n                    name : key ,\r\n                    price : menuItems[key].price,\r\n                    quantity : userItem.quantity\r\n                })\r\n                break;\r\n            }\r\n        }\r\n    })\r\n    return convertedData;\r\n}\r\n\r\nexport function getDistanceFromLatLonInKm(lat1,lon1,lat2,lon2) {\r\n    var R = 6371; // Radius of the earth in km\r\n    var dLat = deg2rad(lat2-lat1);  // deg2rad below\r\n    var dLon = deg2rad(lon2-lon1); \r\n    var a = \r\n      Math.sin(dLat/2) * Math.sin(dLat/2) +\r\n      Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * \r\n      Math.sin(dLon/2) * Math.sin(dLon/2)\r\n      ; \r\n    var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a)); \r\n    var d = R * c; // Distance in km\r\n    return d;\r\n  }\r\n  \r\nfunction deg2rad(deg) {\r\n    return deg * (Math.PI/180)\r\n}\r\n\r\nfunction coordsLine(homeLat , homeLng){\r\n    var minimumDistance = getDistanceFromLatLonInKm(homeLat , homeLng , markers[0].position.lat , markers[0].position.lng);\r\n    var destinationCoords = {lat : markers[0].position.lat , lng : markers[0].position.lng};\r\n\r\n    markers.map((currentMarker) => {\r\n        const currentDistance = getDistanceFromLatLonInKm(homeLat , homeLng , currentMarker.position.lat , currentMarker.position.lng);\r\n        if(currentDistance < minimumDistance){\r\n            minimumDistance = currentDistance;\r\n            destinationCoords.lat = currentMarker.position.lat;\r\n            destinationCoords.lng = currentMarker.position.lng;\r\n        }\r\n    });\r\n\r\n\r\n\r\n}\r\n\r\nexport default dataCartFormat;"]},"metadata":{},"sourceType":"module"}